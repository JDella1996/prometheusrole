global:
  scrape_interval:     5s # Set the scrape interval to every 5 seconds. Default is every 1 minute.
  evaluation_interval: 5s # Evaluate rules every 5 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).

  # Attach these labels to any time series or alerts when communicating with
  # external systems (federation, remote storage, Alertmanager).
  external_labels:
    monitor: 'codelab-monitor'

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
rule_files:
  - "nodes.yml"
# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
  - job_name: 'prometheus'

    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.

    static_configs:
      - targets: ['0.0.0.0:9090']

  - job_name: 'netdata-scrape'
    metrics_path: '/api/v1/allmetrics'
    params:
      format: [prometheus_all_hosts]
    honor_labels: true
    
    static_configs:
{% for host in play_hosts %}
    - targets: [{{hostvars[host]['ansible_default_ipv4']['address']}}:19999]
      labels:
{% if hostvars[host]['ansible_facts']['ansible_local']['mig_alias']['mig_alias'] is defined and hostvars[host]['ansible_facts']['ansible_local']['mig_alias']['mig_alias'] != "" %}
        instance: '{{hostvars[host]['ansible_facts']['ansible_local']['mig_alias']['mig_alias']}}'
        groups: '{{hostvars[host].group_names[0]}}'
{% else %}
        instance: '{{hostvars[host]['ansible_nodename']}}'
        groups: '{{hostvars[host].group_names[0]}}'        
{% endif %}

{% endfor %}
